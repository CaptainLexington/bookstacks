["^ ","~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$cljs-uuid-utils.core","~:imports",null,"~:requires",["^ ","~$string","~$clojure.string","^8","^8"],"~:uses",null,"~:defs",["^ ","~$uuid-string",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/captain/Development/bookstacks/resources/public/js/compiled/out/cljs_uuid_utils/core.cljs","~:line",20,"~:column",7,"~:end-line",20,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^D",[["~$a-uuid"]]]]],"~:doc","(uuid-string a-uuid)  =>  uuid-str\n  Arguments and Values:\n  a-uuid --- a cljs.core/UUID instance.\n  uuid-str --- returns a string representation of the UUID instance\n  Description:\n  Returns the string representation of the UUID instance in the format of,\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" similarly to java.util.UUID/toString.\n  Note that this is different from cljs.core/UUID's EDN string-format.\n  Examples:\n  (def u (make-random-uuid))  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (uuid-string u) => \"305e764d-b451-47ae-a90d-5db782ac1f2e\""],"^3","~$cljs-uuid-utils.core/uuid-string","~:variadic",false,"^>","resources/public/js/compiled/out/cljs_uuid_utils/core.cljs","^B",18,"~:method-params",["^D",[["^F"]]],"~:protocol-impl",null,"~:arglists-meta",["^D",[null,null]],"^@",1,"^?",20,"^A",20,"~:max-fixed-arity",1,"~:fn-var",true,"^C",["^D",["^E",["^D",[["^F"]]]]],"^G","(uuid-string a-uuid)  =>  uuid-str\n  Arguments and Values:\n  a-uuid --- a cljs.core/UUID instance.\n  uuid-str --- returns a string representation of the UUID instance\n  Description:\n  Returns the string representation of the UUID instance in the format of,\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" similarly to java.util.UUID/toString.\n  Note that this is different from cljs.core/UUID's EDN string-format.\n  Examples:\n  (def u (make-random-uuid))  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (uuid-string u) => \"305e764d-b451-47ae-a90d-5db782ac1f2e\""],"~$make-random-squuid",["^ ","^<",null,"^=",["^ ","^>","/home/captain/Development/bookstacks/resources/public/js/compiled/out/cljs_uuid_utils/core.cljs","^?",36,"^@",7,"^A",36,"^B",25,"^C",["^D",["^E",["^D",[[]]]]],"^G","(make-random-squuid)  =>  new-uuid\n  Arguments and Values:\n  new-squuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated, semi-sequential SQUUID. \n  See http://docs.datomic.com/clojure/#datomic.api/squuid\n  Returns a UUID where the most significant 32 bits are the current time since epoch in seconds.\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-squuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-squuid)) => cljs.core/UUID"],"^3","~$cljs-uuid-utils.core/make-random-squuid","^I",false,"^>","resources/public/js/compiled/out/cljs_uuid_utils/core.cljs","^B",25,"^J",["^D",[[]]],"^K",null,"^L",["^D",[null,null]],"^@",1,"^?",36,"^A",36,"^M",0,"^N",true,"^C",["^D",["^E",["^D",[[]]]]],"^G","(make-random-squuid)  =>  new-uuid\n  Arguments and Values:\n  new-squuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated, semi-sequential SQUUID. \n  See http://docs.datomic.com/clojure/#datomic.api/squuid\n  Returns a UUID where the most significant 32 bits are the current time since epoch in seconds.\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-squuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-squuid)) => cljs.core/UUID"],"~$make-random-uuid",["^ ","^<",null,"^=",["^ ","^>","/home/captain/Development/bookstacks/resources/public/js/compiled/out/cljs_uuid_utils/core.cljs","^?",60,"^@",7,"^A",60,"^B",23,"^C",["^D",["^E",["^D",[[]]]]],"^G","(make-random-uuid)  =>  new-uuid\n  Arguments and Values:\n  new-uuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated UUID,\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-uuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-uuid)) => cljs.core/UUID"],"^3","~$cljs-uuid-utils.core/make-random-uuid","^I",false,"^>","resources/public/js/compiled/out/cljs_uuid_utils/core.cljs","^B",23,"^J",["^D",[[]]],"^K",null,"^L",["^D",[null,null]],"^@",1,"^?",60,"^A",60,"^M",0,"^N",true,"^C",["^D",["^E",["^D",[[]]]]],"^G","(make-random-uuid)  =>  new-uuid\n  Arguments and Values:\n  new-uuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated UUID,\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-uuid)  =>  #uuid \"305e764d-b451-47ae-a90d-5db782ac1f2e\"\n  (type (make-random-uuid)) => cljs.core/UUID"],"~$uuid-regex",["^ ","^3","~$cljs-uuid-utils.core/uuid-regex","^>","resources/public/js/compiled/out/cljs_uuid_utils/core.cljs","^?",81,"^@",1,"^A",81,"^B",26,"~:private",true,"^=",["^ ","^>","/home/captain/Development/bookstacks/resources/public/js/compiled/out/cljs_uuid_utils/core.cljs","^?",81,"^@",16,"^A",81,"^B",26,"^U",true]],"~$valid-uuid?",["^ ","^<",null,"^=",["^ ","^>","/home/captain/Development/bookstacks/resources/public/js/compiled/out/cljs_uuid_utils/core.cljs","^?",86,"^@",7,"^A",86,"^B",18,"^C",["^D",["^E",["^D",[["~$maybe-uuid"]]]]],"^G","(valid-uuid? maybe-uuid)  =>  truthy-falsy\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  truthy-falsy --- Returns either the conforming UUID-string (truthy) or nil (falsy).\n  Description:\n  Predicate to test whether a string representation conforms to a\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" format where each x is a hexadecimal character.\n  Input can be a maybe-uuid string or a cljs.core/UUID instance.\n  Note that the current \"cljs.core/UUID.\" constructor does not check for any conformance.\n  Examples:\n  (valid-uuid? \"NO-WAY\")  =>  nil\n  (valid-uuid? \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"YES-WAY\"))  => nil"],"^3","~$cljs-uuid-utils.core/valid-uuid?","^I",false,"^>","resources/public/js/compiled/out/cljs_uuid_utils/core.cljs","^B",18,"^J",["^D",[["^W"]]],"^K",null,"^L",["^D",[null,null]],"^@",1,"^?",86,"^A",86,"^M",1,"^N",true,"^C",["^D",["^E",["^D",[["^W"]]]]],"^G","(valid-uuid? maybe-uuid)  =>  truthy-falsy\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  truthy-falsy --- Returns either the conforming UUID-string (truthy) or nil (falsy).\n  Description:\n  Predicate to test whether a string representation conforms to a\n  \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" format where each x is a hexadecimal character.\n  Input can be a maybe-uuid string or a cljs.core/UUID instance.\n  Note that the current \"cljs.core/UUID.\" constructor does not check for any conformance.\n  Examples:\n  (valid-uuid? \"NO-WAY\")  =>  nil\n  (valid-uuid? \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (valid-uuid? (UUID. \"YES-WAY\"))  => nil"],"~$make-uuid-from",["^ ","^<",null,"^=",["^ ","^>","/home/captain/Development/bookstacks/resources/public/js/compiled/out/cljs_uuid_utils/core.cljs","^?",112,"^@",7,"^A",112,"^B",21,"^C",["^D",["^E",["^D",[["^W"]]]]],"^G","(make-uuid-from maybe-uuid maybe-uuid)  =>  uuid-or-nil\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  uuid-or-nil --- Returns either a cljs.core/UUID instance or nil.\n  Description:\n  Returns a cljs.core/UUID instance for a conformant UUID-string representation, or nil.\n  Input can be a string or a cljs.core/UUID instance.\n  Note that if the input UUID-instance is not valid, nil is returned.\n  Examples:\n  (make-uuid-from \"NO-WAY\")  =>  nil\n  (make-uuid-from \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"YES-WAY\"))  => nil"],"^3","~$cljs-uuid-utils.core/make-uuid-from","^I",false,"^>","resources/public/js/compiled/out/cljs_uuid_utils/core.cljs","^B",21,"^J",["^D",[["^W"]]],"^K",null,"^L",["^D",[null,null]],"^@",1,"^?",112,"^A",112,"^M",1,"^N",true,"^C",["^D",["^E",["^D",[["^W"]]]]],"^G","(make-uuid-from maybe-uuid maybe-uuid)  =>  uuid-or-nil\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  uuid-or-nil --- Returns either a cljs.core/UUID instance or nil.\n  Description:\n  Returns a cljs.core/UUID instance for a conformant UUID-string representation, or nil.\n  Input can be a string or a cljs.core/UUID instance.\n  Note that if the input UUID-instance is not valid, nil is returned.\n  Examples:\n  (make-uuid-from \"NO-WAY\")  =>  nil\n  (make-uuid-from \"4d7332e7-e4c6-4ca5-af91-86336c825e25\")  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"))  => #uuid \"4d7332e7-e4c6-4ca5-af91-86336c825e25\"\n  (make-uuid-from (UUID. \"YES-WAY\"))  => nil"]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^2",["~:true"]],"~:order",["^12"]],"^G","ClojureScript micro-library with an implementation of a type 4, random UUID generator compatible with RFC-4122 and cljs.core/UUID (make-random-uuid), a getter function to obtain the uuid string representation from a UUID-instance (uuid-string), a uuid-string conformance validating predicate (valid-uuid?), and a UUID factory from uuid-string with conformance validation (make-uuid-from)."]