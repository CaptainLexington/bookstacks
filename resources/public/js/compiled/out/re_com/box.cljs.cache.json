["^ ","~:use-macros",["^ ","~$validate-args-macro","~$re-com.validate"],"~:excludes",["~#set",[]],"~:name","~$re-com.box","~:imports",null,"~:requires",["^ ","~$string","~$clojure.string","^:","^:","^2","^2"],"~:uses",["^ ","~$html-attr?","^2","~$scroll-style?","^2","~$align-style?","^2","~$justify-style?","^2","~$scroll-options-list","^2","~$css-style?","^2","~$justify-options-list","^2","~$string-or-hiccup?","^2","~$align-options-list","^2"],"~:defs",["^ ","~$align-style",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","~:line",82,"~:column",7,"~:end-line",82,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^O",[["~$attribute","~$align"]]]]],"~:doc","Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property"],"^5","~$re-com.box/align-style","~:variadic",false,"^I","resources/public/js/compiled/out/re_com/box.cljs","^M",18,"~:method-params",["^O",[["^Q","^R"]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^K",1,"^J",82,"^L",82,"~:max-fixed-arity",2,"~:fn-var",true,"^N",["^O",["^P",["^O",[["^Q","^R"]]]]],"^S","Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property"],"~$h-box",["^ ","^G",null,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",233,"^K",7,"^L",233,"^M",12,"^N",["^O",["^P",["^O",[["~$&",["^ ","~:keys",["~$size","~$width","~$height","~$min-width","~$min-height","~$max-width","~$max-height","~$justify","^R","~$align-self","~$margin","~$padding","~$gap","~$children","~$class","~$style","~$attr"],"~:or",["^ ","^11","none","^18","~:start","^R","~:stretch"],"~:as","~$args"]]]]]],"^S","Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent","~:top-fn",["^ ","^U",true,"^Y",0,"^V",[["^O",[["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@"],"^1A",["^ ","^11","none","^18","^1B","^R","^1C"],"^1D","^1E"]]]],"^N",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@"],"^1A",["^ ","^11","none","^18","^1B","^R","^1C"],"^1D","^1E"]]]],"^X",["^O",[null]]]],"^5","~$re-com.box/h-box","^U",true,"^I","resources/public/js/compiled/out/re_com/box.cljs","^M",12,"^1F",["^ ","^U",true,"^Y",0,"^V",[["^O",[["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@"],"^1A",["^ ","^11","none","^18","^1B","^R","^1C"],"^1D","^1E"]]]],"^N",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@"],"^1A",["^ ","^11","none","^18","^1B","^R","^1C"],"^1D","^1E"]]]],"^X",["^O",[null]]],"^V",[["^O",[["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@"],"^1A",["^ ","^11","none","^18","^1B","^R","^1C"],"^1D","^1E"]]]],"^W",null,"^X",["^O",[null]],"^K",1,"^J",233,"^L",233,"^Y",0,"^Z",true,"^N",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@"],"^1A",["^ ","^11","none","^18","^1B","^R","^1C"],"^1D","^1E"]]]],"^S","Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent"],"~$border",["^ ","^G",null,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",473,"^K",7,"^L",473,"^M",13,"^N",["^O",["^P",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^1:","^1;","^1H","~$l-border","~$r-border","~$t-border","~$b-border","~$radius","~$child","^1>","^1?","^1@"],"^1A",["^ ","^11","none"],"^1D","^1E"]]]]]],"^S","Returns hiccup which produces a border component.\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\n   border property syntax: '<border-width> || <border-style> || <color>'\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\n    - color:        standard CSS color (e.g. grey #88ffee)","^1F",["^ ","^U",true,"^Y",0,"^V",[["^O",[["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^1:","^1;","^1H","^1I","^1J","^1K","^1L","^1M","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","none"],"^1D","^1E"]]]],"^N",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^1:","^1;","^1H","^1I","^1J","^1K","^1L","^1M","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","none"],"^1D","^1E"]]]],"^X",["^O",[null]]]],"^5","~$re-com.box/border","^U",true,"^I","resources/public/js/compiled/out/re_com/box.cljs","^M",13,"^1F",["^ ","^U",true,"^Y",0,"^V",[["^O",[["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^1:","^1;","^1H","^1I","^1J","^1K","^1L","^1M","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","none"],"^1D","^1E"]]]],"^N",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^1:","^1;","^1H","^1I","^1J","^1K","^1L","^1M","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","none"],"^1D","^1E"]]]],"^X",["^O",[null]]],"^V",[["^O",[["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^1:","^1;","^1H","^1I","^1J","^1K","^1L","^1M","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","none"],"^1D","^1E"]]]],"^W",null,"^X",["^O",[null]],"^K",1,"^J",473,"^L",473,"^Y",0,"^Z",true,"^N",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^1:","^1;","^1H","^1I","^1J","^1K","^1L","^1M","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","none"],"^1D","^1E"]]]],"^S","Returns hiccup which produces a border component.\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\n   border property syntax: '<border-width> || <border-style> || <color>'\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\n    - color:        standard CSS color (e.g. grey #88ffee)"],"~$flex-flow-style",["^ ","^G",null,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",60,"^K",7,"^L",60,"^M",22,"^N",["^O",["^P",["^O",[["~$flex-flow"]]]]],"^S","A cross-browser helper function to output flex-flow with all it's potential browser prefixes"],"^5","~$re-com.box/flex-flow-style","^U",false,"^I","resources/public/js/compiled/out/re_com/box.cljs","^M",22,"^V",["^O",[["^1Q"]]],"^W",null,"^X",["^O",[null,null]],"^K",1,"^J",60,"^L",60,"^Y",1,"^Z",true,"^N",["^O",["^P",["^O",[["^1Q"]]]]],"^S","A cross-browser helper function to output flex-flow with all it's potential browser prefixes"],"~$h-box-args-desc",["^ ","^5","~$re-com.box/h-box-args-desc","^I","resources/public/js/compiled/out/re_com/box.cljs","^J",214,"^K",1,"^L",214,"^M",21,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",214,"^K",6,"^L",214,"^M",21]],"~$scroller",["^ ","^G",null,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",407,"^K",7,"^L",407,"^M",15,"^N",["^O",["^P",["^O",[["~$&",["^ ","^10",["^11","~$scroll","~$h-scroll","~$v-scroll","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","auto"],"^1D","^1E"]]]]]],"^S","Returns hiccup which produces a scoller component.\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\n   There are three scroll types:\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\n    - scroll    Sets both h-scroll and v-scroll at once.\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\n           :on     Always show scroll bar(s).\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value","^1F",["^ ","^U",true,"^Y",0,"^V",[["^O",[["^ ","^10",["^11","^1V","^1W","^1X","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","auto"],"^1D","^1E"]]]],"^N",["^O",[["~$&",["^ ","^10",["^11","^1V","^1W","^1X","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","auto"],"^1D","^1E"]]]],"^X",["^O",[null]]]],"^5","~$re-com.box/scroller","^U",true,"^I","resources/public/js/compiled/out/re_com/box.cljs","^M",15,"^1F",["^ ","^U",true,"^Y",0,"^V",[["^O",[["^ ","^10",["^11","^1V","^1W","^1X","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","auto"],"^1D","^1E"]]]],"^N",["^O",[["~$&",["^ ","^10",["^11","^1V","^1W","^1X","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","auto"],"^1D","^1E"]]]],"^X",["^O",[null]]],"^V",[["^O",[["^ ","^10",["^11","^1V","^1W","^1X","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","auto"],"^1D","^1E"]]]],"^W",null,"^X",["^O",[null]],"^K",1,"^J",407,"^L",407,"^Y",0,"^Z",true,"^N",["^O",[["~$&",["^ ","^10",["^11","^1V","^1W","^1X","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","auto"],"^1D","^1E"]]]],"^S","Returns hiccup which produces a scoller component.\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\n   There are three scroll types:\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\n    - scroll    Sets both h-scroll and v-scroll at once.\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\n           :on     Always show scroll bar(s).\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value"],"~$box",["^ ","^G",null,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",352,"^K",7,"^L",352,"^M",10,"^N",["^O",["^P",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","none"],"^1D","^1E"]]]]]],"^S","Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\n   By default, it also acts as a container for further child compenents, or another h-box or v-box","^1F",["^ ","^U",true,"^Y",0,"^V",[["^O",[["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","none"],"^1D","^1E"]]]],"^N",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","none"],"^1D","^1E"]]]],"^X",["^O",[null]]]],"^5","~$re-com.box/box","^U",true,"^I","resources/public/js/compiled/out/re_com/box.cljs","^M",10,"^1F",["^ ","^U",true,"^Y",0,"^V",[["^O",[["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","none"],"^1D","^1E"]]]],"^N",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","none"],"^1D","^1E"]]]],"^X",["^O",[null]]],"^V",[["^O",[["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","none"],"^1D","^1E"]]]],"^W",null,"^X",["^O",[null]],"^K",1,"^J",352,"^L",352,"^Y",0,"^Z",true,"^N",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1N","^1>","^1?","^1@"],"^1A",["^ ","^11","none"],"^1D","^1E"]]]],"^S","Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\n   By default, it also acts as a container for further child compenents, or another h-box or v-box"],"~$box-args-desc",["^ ","^5","~$re-com.box/box-args-desc","^I","resources/public/js/compiled/out/re_com/box.cljs","^J",334,"^K",1,"^L",334,"^M",19,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",334,"^K",6,"^L",334,"^M",19]],"~$debug",["^ ","^5","~$re-com.box/debug","^I","resources/public/js/compiled/out/re_com/box.cljs","^J",6,"^K",1,"^L",6,"^M",11,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",6,"^K",6,"^L",6,"^M",11]],"~$justify-style",["^ ","^G",null,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",66,"^K",7,"^L",66,"^M",20,"^N",["^O",["^P",["^O",[["^18"]]]]],"^S","Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property"],"^5","~$re-com.box/justify-style","^U",false,"^I","resources/public/js/compiled/out/re_com/box.cljs","^M",20,"^V",["^O",[["^18"]]],"^W",null,"^X",["^O",[null,null]],"^K",1,"^J",66,"^L",66,"^Y",1,"^Z",true,"^N",["^O",["^P",["^O",[["^18"]]]]],"^S","Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property"],"~$gap-args-desc",["^ ","^5","~$re-com.box/gap-args-desc","^I","resources/public/js/compiled/out/re_com/box.cljs","^J",157,"^K",1,"^L",157,"^M",19,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",157,"^K",6,"^L",157,"^M",19]],"~$v-box",["^ ","^G",null,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",293,"^K",7,"^L",293,"^M",12,"^N",["^O",["^P",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@"],"^1A",["^ ","^11","none","^18","^1B","^R","^1C"],"^1D","^1E"]]]]]],"^S","Returns hiccup which produces a vertical box.\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\n   By default, it also acts as a child under it's parent","^1F",["^ ","^U",true,"^Y",0,"^V",[["^O",[["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@"],"^1A",["^ ","^11","none","^18","^1B","^R","^1C"],"^1D","^1E"]]]],"^N",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@"],"^1A",["^ ","^11","none","^18","^1B","^R","^1C"],"^1D","^1E"]]]],"^X",["^O",[null]]]],"^5","~$re-com.box/v-box","^U",true,"^I","resources/public/js/compiled/out/re_com/box.cljs","^M",12,"^1F",["^ ","^U",true,"^Y",0,"^V",[["^O",[["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@"],"^1A",["^ ","^11","none","^18","^1B","^R","^1C"],"^1D","^1E"]]]],"^N",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@"],"^1A",["^ ","^11","none","^18","^1B","^R","^1C"],"^1D","^1E"]]]],"^X",["^O",[null]]],"^V",[["^O",[["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@"],"^1A",["^ ","^11","none","^18","^1B","^R","^1C"],"^1D","^1E"]]]],"^W",null,"^X",["^O",[null]],"^K",1,"^J",293,"^L",293,"^Y",0,"^Z",true,"^N",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1<","^1=","^1>","^1?","^1@"],"^1A",["^ ","^11","none","^18","^1B","^R","^1C"],"^1D","^1E"]]]],"^S","Returns hiccup which produces a vertical box.\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\n   By default, it also acts as a child under it's parent"],"~$flex-child-style",["^ ","^G",null,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",13,"^K",7,"^L",13,"^M",23,"^N",["^O",["^P",["^O",[["^11"]]]]],"^S","Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\d+)(px|%|em)|(\\d+)\\w(\\d+)\\w(.*) - remove double backslashes"],"^5","~$re-com.box/flex-child-style","^U",false,"^I","resources/public/js/compiled/out/re_com/box.cljs","^M",23,"^V",["^O",[["^11"]]],"^W",null,"^X",["^O",[null,null]],"^K",1,"^J",13,"^L",13,"^Y",1,"^Z",true,"^N",["^O",["^P",["^O",[["^11"]]]]],"^S","Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\d+)(px|%|em)|(\\d+)\\w(\\d+)\\w(.*) - remove double backslashes"],"~$line-args-desc",["^ ","^5","~$re-com.box/line-args-desc","^I","resources/public/js/compiled/out/re_com/box.cljs","^J",186,"^K",1,"^L",186,"^M",20,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",186,"^K",6,"^L",186,"^M",20]],"~$scroller-args-desc",["^ ","^5","~$re-com.box/scroller-args-desc","^I","resources/public/js/compiled/out/re_com/box.cljs","^J",382,"^K",1,"^L",382,"^M",24,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",382,"^K",6,"^L",382,"^M",24]],"~$line",["^ ","^G",null,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",193,"^K",7,"^L",193,"^M",11,"^N",["^O",["^P",["^O",[["~$&",["^ ","^10",["^11","~$color","^1>","^1?","^1@"],"^1A",["^ ","^11","1px","^2A","lightgray"],"^1D","^1E"]]]]]],"^S","Returns a component which produces a line between children in a v-box/h-box along the main axis.\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line","^1F",["^ ","^U",true,"^Y",0,"^V",[["^O",[["^ ","^10",["^11","^2A","^1>","^1?","^1@"],"^1A",["^ ","^11","1px","^2A","lightgray"],"^1D","^1E"]]]],"^N",["^O",[["~$&",["^ ","^10",["^11","^2A","^1>","^1?","^1@"],"^1A",["^ ","^11","1px","^2A","lightgray"],"^1D","^1E"]]]],"^X",["^O",[null]]]],"^5","~$re-com.box/line","^U",true,"^I","resources/public/js/compiled/out/re_com/box.cljs","^M",11,"^1F",["^ ","^U",true,"^Y",0,"^V",[["^O",[["^ ","^10",["^11","^2A","^1>","^1?","^1@"],"^1A",["^ ","^11","1px","^2A","lightgray"],"^1D","^1E"]]]],"^N",["^O",[["~$&",["^ ","^10",["^11","^2A","^1>","^1?","^1@"],"^1A",["^ ","^11","1px","^2A","lightgray"],"^1D","^1E"]]]],"^X",["^O",[null]]],"^V",[["^O",[["^ ","^10",["^11","^2A","^1>","^1?","^1@"],"^1A",["^ ","^11","1px","^2A","lightgray"],"^1D","^1E"]]]],"^W",null,"^X",["^O",[null]],"^K",1,"^J",193,"^L",193,"^Y",0,"^Z",true,"^N",["^O",[["~$&",["^ ","^10",["^11","^2A","^1>","^1?","^1@"],"^1A",["^ ","^11","1px","^2A","lightgray"],"^1D","^1E"]]]],"^S","Returns a component which produces a line between children in a v-box/h-box along the main axis.\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line"],"~$scroll-style",["^ ","^G",null,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",99,"^K",7,"^L",99,"^M",19,"^N",["^O",["^P",["^O",[["^Q","^1V"]]]]],"^S","Determines the value for the 'overflow' attribute.\n   The scroll parameter is a keyword.\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value"],"^5","~$re-com.box/scroll-style","^U",false,"^I","resources/public/js/compiled/out/re_com/box.cljs","^M",19,"^V",["^O",[["^Q","^1V"]]],"^W",null,"^X",["^O",[null,null]],"^K",1,"^J",99,"^L",99,"^Y",2,"^Z",true,"^N",["^O",["^P",["^O",[["^Q","^1V"]]]]],"^S","Determines the value for the 'overflow' attribute.\n   The scroll parameter is a keyword.\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value"],"^1<",["^ ","^G",null,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",165,"^K",7,"^L",165,"^M",10,"^N",["^O",["^P",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^1>","^1?","^1@"],"^1D","^1E"]]]]]],"^S","Returns a component which produces a gap between children in a v-box/h-box along the main axis","^1F",["^ ","^U",true,"^Y",0,"^V",[["^O",[["^ ","^10",["^11","^12","^13","^1>","^1?","^1@"],"^1D","^1E"]]]],"^N",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^1>","^1?","^1@"],"^1D","^1E"]]]],"^X",["^O",[null]]]],"^5","~$re-com.box/gap","^U",true,"^I","resources/public/js/compiled/out/re_com/box.cljs","^M",10,"^1F",["^ ","^U",true,"^Y",0,"^V",[["^O",[["^ ","^10",["^11","^12","^13","^1>","^1?","^1@"],"^1D","^1E"]]]],"^N",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^1>","^1?","^1@"],"^1D","^1E"]]]],"^X",["^O",[null]]],"^V",[["^O",[["^ ","^10",["^11","^12","^13","^1>","^1?","^1@"],"^1D","^1E"]]]],"^W",null,"^X",["^O",[null]],"^K",1,"^J",165,"^L",165,"^Y",0,"^Z",true,"^N",["^O",[["~$&",["^ ","^10",["^11","^12","^13","^1>","^1?","^1@"],"^1D","^1E"]]]],"^S","Returns a component which produces a gap between children in a v-box/h-box along the main axis"],"~$border-args-desc",["^ ","^5","~$re-com.box/border-args-desc","^I","resources/public/js/compiled/out/re_com/box.cljs","^J",452,"^K",1,"^L",452,"^M",22,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",452,"^K",6,"^L",452,"^M",22]],"~$v-box-args-desc",["^ ","^5","~$re-com.box/v-box-args-desc","^I","resources/public/js/compiled/out/re_com/box.cljs","^J",274,"^K",1,"^L",274,"^M",21,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",274,"^K",6,"^L",274,"^M",21]],"~$box-base",["^ ","^G",null,"^H",["^ ","^I","/home/captain/Development/bookstacks/resources/public/js/compiled/out/re_com/box.cljs","^J",115,"^K",8,"^L",115,"^M",16,"~:private",true,"^N",["^O",["^P",["^O",[["~$&",["^ ","^10",["^11","^1V","^1W","^1X","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1H","^1I","^1J","^1K","^1L","^1M","~$bk-color","^1N","~$class-name","^1>","^1?","^1@"]]]]]]],"^S","This should generally NOT be used as it is the basis for the box, scroller and border components","^1F",["^ ","^U",true,"^Y",0,"^V",[["^O",[["^ ","^10",["^11","^1V","^1W","^1X","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1H","^1I","^1J","^1K","^1L","^1M","^2L","^1N","^2M","^1>","^1?","^1@"]]]]],"^N",["^O",[["~$&",["^ ","^10",["^11","^1V","^1W","^1X","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1H","^1I","^1J","^1K","^1L","^1M","^2L","^1N","^2M","^1>","^1?","^1@"]]]]],"^X",["^O",[null]]]],"^2K",true,"^5","~$re-com.box/box-base","^U",true,"^I","resources/public/js/compiled/out/re_com/box.cljs","^M",16,"^1F",["^ ","^U",true,"^Y",0,"^V",[["^O",[["^ ","^10",["^11","^1V","^1W","^1X","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1H","^1I","^1J","^1K","^1L","^1M","^2L","^1N","^2M","^1>","^1?","^1@"]]]]],"^N",["^O",[["~$&",["^ ","^10",["^11","^1V","^1W","^1X","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1H","^1I","^1J","^1K","^1L","^1M","^2L","^1N","^2M","^1>","^1?","^1@"]]]]],"^X",["^O",[null]]],"^V",[["^O",[["^ ","^10",["^11","^1V","^1W","^1X","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1H","^1I","^1J","^1K","^1L","^1M","^2L","^1N","^2M","^1>","^1?","^1@"]]]]],"^W",null,"^X",["^O",[null]],"^K",1,"^J",115,"^L",115,"^Y",0,"^Z",true,"^N",["^O",[["~$&",["^ ","^10",["^11","^1V","^1W","^1X","^12","^13","^14","^15","^16","^17","^18","^R","^19","^1:","^1;","^1H","^1I","^1J","^1K","^1L","^1M","^2L","^1N","^2M","^1>","^1?","^1@"]]]]],"^S","This should generally NOT be used as it is the basis for the box, scroller and border components"]],"~:require-macros",["^ ","^2","^2"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:description","~:min-width","~:children","~:align-items","~:align","~:bk-color","~:max-height","~:border-right","~:color","~:min-height","~:r-border","~:justify","~:default","~:overflow","^5","~:-webkit-flex-flow","~:background-color","~:h-scroll","~:-webkit-flex","~:-webkit-justify-content","~:width","^1B","~:type","~:flex","~:b-border","~:max-width","~:radius","~:border-left","~:size","~:style","~:div","~:span.bold","~:scroll","~:l-border","~:class","~:padding","~:justify-content","~:gap","~:t-border","~:code","~:overflow-x","~:validate-fn","~:br","~:class-name","~:child","~:align-self","~:border","~:border-top","~:overflow-y","~:border-radius","^1C","~:v-scroll","~:auto","~:required","~:height","~:border-bottom","~:span","~:flex-flow","~:margin","~:attr"]],"~:order",["^37","^3;","^34","^40","^38","^3H","^3P","^3Q","^3R","^3V","^3Y","^41","^42","^2S","^2V","^2W","^2X","^2[","^30","^31","^36","^39","^3<","^3=","^3>","^3@","^3A","^3D","^3F","^3E","^3G","^3J","^3O","^33","^3L","^3T","^2U","^3?","^2Y","^3S","^3Z","^3U","^35","^3B","^5","^3X","^3:","^3M","^2R","^3[","^3K","^3N","^32","^2Z","^2T","^3C","^1B","^1C","^3I","^3W"]],"^S",null]